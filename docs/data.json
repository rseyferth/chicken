{
    "project": {},
    "files": {
        "src/Core/Object.js": {
            "name": "src/Core/Object.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Core.Object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Core/Observable.js": {
            "name": "src/Core/Observable.js",
            "modules": {},
            "classes": {
                "Core.Observable": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "Core.Object": 1,
                "Core.Observable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Core/Observable.js",
            "line": 8
        }
    },
    "classes": {
        "Core.Object": {
            "name": "Core.Object",
            "shortname": "Core.Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/Core/Object.js",
            "line": 6,
            "description": "Basic object that can trigger events",
            "is_constructor": 1
        },
        "Core.Observable": {
            "name": "Core.Observable",
            "shortname": "Core.Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/Core/Observable.js",
            "line": 8,
            "description": "The basic object class that notifies **observers** and **students** about \nchanges in its attributes. \n\n## Observers\nAn observer is an object (in actuality a callback) that watches for changes on \na certain attribute or it's child attributes, in case of nested Observables. \nAn observer can {{#crossLink \"Core.Observable/disregard\"}}{{/crossLink}} the attribute to stop watching.\n\n<code>\n\t// Initialize object and watch for changes\n\tvar obj = new Chicken.Core.Observable();\n\tobj.set('foo', 'bar');\n\tvar callback = () => {\n\t\talert('Changed: ' + obj.get('foo'));\n\t};\n\tobj.observe('foo', callback);\n\n\t// Change\n\tobj.set('foo', 'boo'); // Will alert 'Changed: boo'\n\n\t// Stop watching\n obj.disregard('foo', callback);\n obj.set('foo', 'back-to-bar'); // Will not alert anthing\n</code>\n\n## Students\nA student is an object (in actuality a callback) that watches for changes in\n**any attribute** or any **child attribute**, in case of nested Observables.\nAn observer can **neglect** their study to stop wachting.",
            "extends": "Core.Object"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/Core/Object.js",
            "line": 23,
            "description": "Add listener for chosen event",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to listen for.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the event occurs. Depending on the event, this \n                             callback can receive 0 or more arguments when called.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\t\tobj.on('message', function(message) {\n\t\t\tconsole.log(message);\n\t\t});"
            ],
            "chainable": 1,
            "class": "Core.Object",
            "module": "Core"
        },
        {
            "file": "src/Core/Object.js",
            "line": 52,
            "description": "Remove a previously added listener for chosen event",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to remove listener for.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The previously added callback to remove from listeners.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Core.Object",
            "module": "Core"
        },
        {
            "file": "src/Core/Observable.js",
            "line": 57,
            "description": "Get attribute from object",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key to retrieve the value of",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value or undefined when the key is not set"
            },
            "class": "Core.Observable",
            "module": "Core"
        },
        {
            "file": "src/Core/Observable.js",
            "line": 68,
            "description": "Set attribute on object. When you set a attribute on Observable, all\n*observers* and *students* will be notified of the change.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key to store the value of",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Core.Observable",
            "module": "Core"
        }
    ],
    "warnings": []
}